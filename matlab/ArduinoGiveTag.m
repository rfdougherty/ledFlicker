function params = ArduinoGiveTag(params)

%% get params for running this command
Conditions = params.Conditions;
NumofCond = size(params.Conditions, 2);

%% give tags indicates the contrasts for three cones are equall as white
for ii = 1:size(Conditions, 2)
    for ij = 1:size(Conditions{ii}.Numwave, 2)
        if Conditions{ii}.Numwave{ij}.Amp1L == Conditions{ii}.Numwave{ij}.Amp1M && ...
                Conditions{ii}.Numwave{ij}.Amp1L == Conditions{ii}.Numwave{ij}.Amp1S
            params.Conditions{ii}.Numwave{ij}.whiteflag1 = true;
        else
            params.Conditions{ii}.Numwave{ij}.whiteflag1 = false;
        end
        if Conditions{ii}.Numwave{ij}.Amp2L == Conditions{ii}.Numwave{ij}.Amp2M && ...
                Conditions{ii}.Numwave{ij}.Amp2L == Conditions{ii}.Numwave{ij}.Amp2S
            params.Conditions{ii}.Numwave{ij}.whiteflag2 = true;
        else
            params.Conditions{ii}.Numwave{ij}.whiteflag2 = false;
        end
    end
end

%% give some tags for parfile and drawing graphs
for ii = 1:NumofCond
    
    if size(params.Conditions{ii}.Numwave, 2) == 1,
        if params.Conditions{ii}.Numwave{1}.whiteflag1 == true && params.Conditions{ii}.Numwave{1}.whiteflag1 == true
            params.Conditions{ii}.w1name = 'equal';
            params.Conditions{ii}.w2name = 'equal';
            
            
            params.Conditions{ii}.parfileTag = sprintf('Freq%3.1f-LMS1equal%1.1f-LMS2equal%1.1f',...
                params.Conditions{ii}.Numwave{1}.Freq,...
                params.Conditions{ii}.Numwave{1}.Amp1L,...
                params.Conditions{ii}.Numwave{1}.Amp2L);
            
        elseif params.Conditions{ii}.Numwave{1}.whiteflag1 == true
            params.Conditions{ii}.w1name = 'equal';
            
            if Conditions{ii}.Numwave{1}.Amp2L == 0 && ...
                    Conditions{ii}.Numwave{1}.Amp2M == 0 && ...
                    Conditions{ii}.Numwave{1}.Amp2S ~= 0  % W2 S cone isolated
                
                params.Conditions{ii}.parfileTag = sprintf('Freq%3.1f-1LMS1equal%1.1f-2SconeIsolated-S%1.1f',...
                    params.Conditions{ii}.Numwave{1}.Freq, params.Conditions{ii}.Numwave{1}.Amp1L, params.Conditions{ii}.Numwave{1}.Amp2S);
                params.Conditions{ii}.w2name = 'S cone isolated';
                
            elseif Conditions{ii}.Numwave{1}.Amp2L ~= 0 && ...
                    Conditions{ii}.Numwave{1}.Amp2M == 0 && ...
                    Conditions{ii}.Numwave{1}.Amp2S == 0 % W2 L cone isolated
                
                params.Conditions{ii}.parfileTag = sprintf('Freq%3.1f-1LMS1equal%1.1f-2LconeIsolated-S%1.1f',...
                    params.Conditions{ii}.Numwave{1}.Freq, params.Conditions{ii}.Numwave{1}.Amp1L, params.Conditions{ii}.Numwave{1}.Amp2L);
                params.Conditions{ii}.w2name = 'L cone isolated';
                
            elseif Conditions{ii}.Numwave{1}.Amp2L ==  0 && ...
                    Conditions{ii}.Numwave{1}.Amp2M ~= 0 && ...
                    Conditions{ii}.Numwave{1}.Amp2S == 0 % W2 M cone isolated
                
                params.Conditions{ii}.parfileTag = sprintf('Freq%3.1f-1LMS1equal%1.1f-2MconeIsolated-S%1.1f',...
                    params.Conditions{ii}.Numwave{1}.Freq, params.Conditions{ii}.Numwave{1}.Amp1L, params.Conditions{ii}.Numwave{1}.Amp2M);
                params.Conditions{ii}.w2name = 'M cone isolated';
                
                
            else
                params.Conditions{ii}.parfileTag = sprintf('Freq%3.1f-1LMS1equal%1.1f-2L%1.1f-2M%1.1f-2S%1.1f',...
                    params.Conditions{ii}.Numwave{1}.Freq,...
                    params.Conditions{ii}.Numwave{1}.Amp1L,...
                    params.Conditions{ii}.Numwave{1}.Amp2L,...
                    params.Conditions{ii}.Numwave{1}.Amp2M,...
                    params.Conditions{ii}.Numwave{1}.Amp2S);
                
                params.Conditions{ii}.w2name = 'none';
                
            end
            
        elseif params.Conditions{ii}.Numwave{1}.whiteflag2 == true
            params.Conditions{ii}.w2name = 'equal';
            
            if Conditions{ii}.Numwave{1}.Amp1L == 0 && ...
                    Conditions{ii}.Numwave{1}.Amp1M == 0 && ...
                    Conditions{ii}.Numwave{1}.Amp1S ~= 0  % W1 S cone isolated
                
                params.Conditions{ii}.parfileTag = sprintf('Freq%3.1f-1SconeIsolated-S%1.1f-2LMS1equal%1.1f',...
                    params.Conditions{ii}.Numwave{1}.Freq, params.Conditions{ii}.Numwave{1}.Amp1S, params.Conditions{ii}.Numwave{1}.Amp2L);
                params.Conditions{ii}.w1name = 'S cone isolated';
                
            elseif Conditions{ii}.Numwave{1}.Amp1L ~= 0 && ...
                    Conditions{ii}.Numwave{1}.Amp1M == 0 && ...
                    Conditions{ii}.Numwave{1}.Amp1S == 0 % W1 L cone isolated
                
                params.Conditions{ii}.parfileTag = sprintf('Freq%3.1f-1LconeIsolated-S%1.1f-2LMS1equal%1.1f',...
                    params.Conditions{ii}.Numwave{1}.Freq, params.Conditions{ii}.Numwave{1}.Amp1L, params.Conditions{ii}.Numwave{1}.Amp2L);
                params.Conditions{ii}.w1name = 'L cone isolated';
                
            elseif Conditions{ii}.Numwave{1}.Amp1L ==  0 && ...
                    Conditions{ii}.Numwave{1}.Amp1M ~= 0 && ...
                    Conditions{ii}.Numwave{1}.Amp1S == 0 % W1 M cone isolated
                
                params.Conditions{ii}.parfileTag = sprintf('Freq%3.1f-1MconeIsolated-S%1.1f-2LMS1equal%1.1f',...
                    params.Conditions{ii}.Numwave{1}.Freq, params.Conditions{ii}.Numwave{1}.Amp1M, params.Conditions{ii}.Numwave{1}.Amp2L);
                params.Conditions{ii}.w1name = 'M cone isolated';
                
            else params.Conditions{ii}.parfileTag = sprintf('Freq%3.1f-1L%1.1f-1M%1.1f-1S%1.1f-2LMS1equal%1.1f',...
                    params.Conditions{ii}.Numwave{1}.Freq,...
                    params.Conditions{ii}.Numwave{1}.Amp1L,...
                    params.Conditions{ii}.Numwave{1}.Amp1M,...
                    params.Conditions{ii}.Numwave{1}.Amp1S,...
                    params.Conditions{ii}.Numwave{1}.Amp2L);
                params.Conditions{ii}.w1name = 'none';
            end
            
        end
        
    elseif size(params.Conditions.Numwave, 2) == 2,
        
        if Conditions{ii}.Numwave{1}.Amp1L == 0 && ...
                Conditions{ii}.Numwave{1}.Amp1M == 0 && ...
                Conditions{ii}.Numwave{1}.Amp1S ~= 0  % W1 S cone isolated
            
            params.Conditions{ii}.w1name = 'S cone isolated';
            
        elseif Conditions{ii}.Numwave{1}.Amp1L ~= 0 && ...
                Conditions{ii}.Numwave{1}.Amp1M == 0 && ...
                Conditions{ii}.Numwave{1}.Amp1S == 0 % W1 L cone isolated
            
            params.Conditions{ii}.w1name = 'L cone isolated';
            
        elseif Conditions{ii}.Numwave{1}.Amp1L ==  0 && ...
                Conditions{ii}.Numwave{1}.Amp1M ~= 0 && ...
                Conditions{ii}.Numwave{1}.Amp1S == 0 % W1 M cone isolated
            
            params.Conditions{ii}.w1name = 'M cone isolated';
        else
            params.Conditions{ii}.w1name = 'none';
        end
        
        if Conditions{ii}.Numwave{1}.Amp2L == 0 && ...
                Conditions{ii}.Numwave{1}.Amp2M == 0 && ...
                Conditions{ii}.Numwave{1}.Amp2S ~= 0  % W2 S cone isolated
            
            params.Conditions{ii}.w2name = 'S cone isolated';
            
        elseif Conditions{ii}.Numwave{1}.Amp2L ~= 0 && ...
                Conditions{ii}.Numwave{1}.Amp2M == 0 && ...
                Conditions{ii}.Numwave{1}.Amp2S == 0 % W2 L cone isolated
            
            params.Conditions{ii}.w2name = 'L cone isolated';
            
        elseif Conditions{ii}.Numwave{1}.Amp2L ==  0 && ...
                Conditions{ii}.Numwave{1}.Amp2M ~= 0 && ...
                Conditions{ii}.Numwave{1}.Amp2S == 0 % W2 M cone isolated
            
            params.Conditions{ii}.w2name = 'M cone isolated';            
        else
            params.Conditions{ii}.w2name = 'none';

        end
                
        params.Conditions{ii}.parfileTag = ...
            sprintf('C1F%3.1f-1L%1.1f-1M%1.1f-1S%1.1f-2L%1.1f-2M%1.1f-2S%1.1f-C2F%3.1f-1L%1.1f-1M%1.1f-1S%1.1f-2L%1.1f-2M%1.1f-2S%1.1f',...
            params.Conditions{ii}.Numwave{1}.Freq,...
            params.Conditions{ii}.Numwave{1}.Amp1L,...
            params.Conditions{ii}.Numwave{1}.Amp1M,...
            params.Conditions{ii}.Numwave{1}.Amp1S,...
            params.Conditions{ii}.Numwave{1}.Amp2L,...
            params.Conditions{ii}.Numwave{1}.Amp2M,...
            params.Conditions{ii}.Numwave{1}.Amp2S,...
            params.Conditions{ii}.Numwave{2}.Freq,...
            params.Conditions{ii}.Numwave{2}.Amp1L,...
            params.Conditions{ii}.Numwave{2}.Amp1M,...
            params.Conditions{ii}.Numwave{2}.Amp1S,...
            params.Conditions{ii}.Numwave{2}.Amp2L,...
            params.Conditions{ii}.Numwave{2}.Amp2M,...
            params.Conditions{ii}.Numwave{2}.Amp2S);
    else
        error('Number of waves in each condition should be 1 or 2!')
    end
    
end